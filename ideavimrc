source ~/.vimrc

" Vim always win!
" sethandler n:vim i:vim == a:vim
" Use vim shortcuts instead IDE"
" https://github.com/JetBrains/ideavim/wiki/sethandler "
sethandler a:vim

" *************************************************************************
" Map leader with comma --------------------------
" *************************************************************************
let mapleader=","

" *************************************************************************
" Plugins
" *************************************************************************
" ................................................
" Use Idea to join lines smartly
" ................................................
" set which-key
" set notimetout
" set timeoutlen=500
" ................................................
" Use Idea to join lines smartly
" ................................................
set ideajoin

" ................................................
" Copy to system clipboard as well
" ................................................
set clipboard+=unnamed,autoselect,ideaput
" set clipboard=unnamed,exclude:cons\|mac,unnamed,ideaput

" ................................................
" Surround text
" ................................................
set surround

" ................................................
" Comment text with gc
" ................................................
set commentary

" Highlight yank selection ----------------------
" ................................................
set highlightedyank
let g:highlightedyank_highlight_color = "rgba(200, 200, 50, 100)"
let g:highlightedyank_highlight_duration = "1000"

" ................................................
" VCS Git actions
" ................................................
map <leader>A :action Annotate<CR>
map <leader>H :action Vcs.ShowTabbedFileHistory<CR>
map <leader>M :action Git.CompareWithBranch<CR>

" noremap ,g :action FindInPath<CR>
" noremap ,s :action FileStructurePopup<CR>

" ................................................
" ReformatCode
" ................................................
nnoremap == :action ReformatCode<CR>
vnoremap == :action ReformatCode<CR>

" ................................................
" Idea Navigation
" ................................................
" --> COMMAND + b
"nnoremap gd :action GotoDeclaration<CR>
map gd <Action>(GotoDeclaration)
" --> COMMAND + SHIFT +  b
" nnoremap gi :action GotoImplementation<CR>
map gi <Action>(GotoImplementation)
" --> COMMAND + u
nnoremap gs :action GotoSuperMethod<CR>
nnoremap gb :action JumpToLastChange<CR>
" ................................................
" MRU (Most Recent Uses) & Navigation
" ................................................
map <leader>f :action GotoClass<CR>
map <leader>F :action GotoFile<CR>

" ................................................
" Move along tabs and windows
"
" ................................................
" map <leader>> :tabmove +1<CR>
" map <leader>< :tabmove -1<CR>
" Go to tab by number
" noremap <leader>1 1gt
" noremap <leader>2 2gt
" noremap <leader>3 3gt
" noremap <leader>4 4gt
" noremap <leader>5 5gt
" noremap <leader>6 6gt
" noremap <leader>7 7gt
" noremap <leader>8 8gt
" noremap <leader>9 9gt


" Overwrite window movements to avoid collision with vim/tmux plugin
nmap <leader>h <action>(PreviousTab)
nmap <leader>l <action>(NextTab)

nmap <C-s> :action MoveEditorToOppositeTabGroup<CR>

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" ................................................
" Idea/Mouse actions
" ................................................
" ................................................
" Rename
" ................................................
map <leader>R :action RenameElement<CR>
" ................................................
" Run and debugging
" ................................................
map <leader>r :action Run<CR>
" Run a test o launch an application
map <leader>rt :action RunClass<CR>

map <leader>d :action Debug<CR>
" Does not work as RunClass
map <leader>dt :action DebugClass<CR>
map <leader>rr :action Rerun<CR>

map <leader>rc :action RunCoverage<CR>

" Add a Breakpoint
map <leader>bk :action ToggleLineBreakpoint<CR>
" Mute a breakpoints
map <leader>mb :action ToggleBreakpointEnabled<CR>
" Mute all Breakpoints
map <leader>mab :action XDebugger.MuteBreakpoints<CR>

" ................................................
" Idea suggestions
" ................................................
" --> Like hoover the mouse on error
map gH <Action>(ShowErrorDescription)
" --> Show available actions of IntelliJ
map gh <Action>(ShowIntentionActions)
" ................................................
" Idea general actions
" ................................................
nnoremap <leader>u :action FindUsages<CR>
nnoremap <leader>a :action GotoAction<CR>
nnoremap <leader>e :action RecentFiles<CR>
" nnoremap <leader>E :action SearchEverywhere<CR>

" Open terminal
nnoremap <leader>T :action ActivateTerminalToolWindow<CR>

" Macros"
" let @d='diw"0P'

" Plug 'vim-scripts/ReplaceWithRegister'
" zR :action ExpandAllRegions<CR>:action ExpandAllRegions<CR>
" map <leader> za :action
" CollapseRegion
" ExpandRegion

" map <leader>c :action Stop<CR>
" nnoremap cc :action CommentByLineComment<CR>
" vnoremap cc :action CommentByLineComment<CR>
" nnoremap <C-CR> :action ShowIntentionActions<CR>

" Extract and inline variables, parameters, methods...
" IntroduceVariable
" ExtractFunction
" Inline
" IntroduceParameter
" ................................................
" vnoremap <leader>v :action IntroduceVariable<CR>
" vnoremap <leader>m :action ExtractFunction<CR>
" vnoremap <leader>i :action Inline<CR>
" vnoremap <leader>p :action IntroduceParameter<CR>


" EditorSelectWord
" EditorUnSelectWord
" ................................................
" nnoremap <leader>Up :action EditorSelectWord<CR>
" nnoremap <leader>Down :action EditorUnSelectWord<CR>


" actions
" nmap <leader>bd <action>(CloseEditor)
" nmap <leader>i <action>(Generate)
" nmap <leader>m <action>(Git.Menu)
" nmap <leader>s <action>(QuickChangeScheme)
" nmap <leader>/ <action>(ShowErrorDescription)
" nmap <leader>e <action>(GotoNextError)
" nnoremap <leader><leader> <C-Tab>

" set NERDTree
" let g:NERDTreeMapActivateNode='l'
" let g:NERDTreeMapJumpParent='h'